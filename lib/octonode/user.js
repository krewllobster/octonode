// Generated by CoffeeScript 1.12.6
(function() {
  var User,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  User = (function() {
    function User(login, client) {
      this.login = login;
      this.client = client;
      this.followers = bind(this.followers, this);
      this.info = bind(this.info, this);
    }

    User.prototype.profile = function(data) {
      return Object.keys(data).forEach((function(_this) {
        return function(e) {
          return _this[e] = data[e];
        };
      })(this));
    };

    User.prototype.info = function(cb) {
      if (cb == null) {
        cb = function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return args;
        };
      }
      return new Promise((function(_this) {
        return function(resolve, reject) {
          return _this.client.get("/users/" + _this.login, function(err, s, b, h) {
            var customError;
            customError = new Error('User info error');
            if (err) {
              return reject(cb(err));
            }
            if (s !== 200) {
              return reject(cb(customError));
            }
            return resolve(cb(null, b, h));
          });
        };
      })(this));
    };

    User.prototype.followers = function() {
      var cb, i, params;
      params = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), cb = arguments[i++];
      if (cb == null) {
        cb = function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          return args;
        };
      }
      return new Promise((function(_this) {
        return function(resolve, reject) {
          var ref;
          return (ref = _this.client).get.apply(ref, ["/users/" + _this.login + "/followers"].concat(slice.call(params), [function(err, s, b, h) {
            var customError;
            customError = new Error('User followers error');
            if (err) {
              return reject(cb(err));
            }
            if (s !== 200) {
              return reject(cb(customError));
            }
            return resolve(cb(null, b, h));
          }]));
        };
      })(this));
    };

    User.prototype.following = function() {
      var cb, i, params, ref;
      params = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), cb = arguments[i++];
      return (ref = this.client).get.apply(ref, ["/users/" + this.login + "/following"].concat(slice.call(params), [function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('User following error'));
        } else {
          return cb(null, b, h);
        }
      }]));
    };

    User.prototype.repos = function() {
      var cb, i, params, ref;
      params = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), cb = arguments[i++];
      return (ref = this.client).get.apply(ref, ["/users/" + this.login + "/repos"].concat(slice.call(params), [function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('User repos error'));
        } else {
          return cb(null, b, h);
        }
      }]));
    };

    User.prototype.events = function() {
      var cb, events, i, params, ref;
      params = 3 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 2) : (i = 0, []), events = arguments[i++], cb = arguments[i++];
      if (!cb && typeof events === 'function') {
        cb = events;
        events = null;
      } else if (events != null) {
        if (typeof events === 'number' && params.length > 0) {
          params[1] = events;
          events = null;
        } else if (!Array.isArray(events)) {
          events = [events];
        }
      }
      return (ref = this.client).get.apply(ref, ["/users/" + this.login + "/events"].concat(slice.call(params), [function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('User events error'));
        }
        if (events != null) {
          b = b.filter(function(event) {
            return events.indexOf(event.type) !== -1;
          });
        }
        return cb(null, b, h);
      }]));
    };

    User.prototype.orgs = function() {
      var cb, i, params, ref;
      params = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), cb = arguments[i++];
      return (ref = this.client).get.apply(ref, ["/users/" + this.login + "/orgs"].concat(slice.call(params), [function(err, s, b, h) {
        if (err) {
          return cb(err);
        }
        if (s !== 200) {
          return cb(new Error('User organizations error'));
        } else {
          return cb(null, b, h);
        }
      }]));
    };

    return User;

  })();

  module.exports = User;

}).call(this);
